import React from 'react'
import { useForm } from 'react-hook-form';
import { useRef, useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { loginUser } from '../../services/authService'; 
import useRedirectIfAuth from '../../hooks/useRedirectIfAuth';

import './index.css'

const LogoSvg = () => (
    <svg width="265" height="55" viewBox="0 0 265 55" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clipPath="url(#clip0_8801_948)">
        <path d="M36.1711 34.1203H62.1036V27.2969H33.0996L36.1711 34.1203Z" fill="#9A0FF1"/>
        <path d="M30.0265 20.4738H62.102V13.6504H26.9551L30.0265 20.4738Z" fill="#9A0FF1"/>
        <path d="M62.1025 0H20.8164L23.8841 6.82338H62.1025V0Z" fill="#9A0FF1"/>
        <path d="M21.4964 54.5943H28.3235L22.1806 40.9476H39.2409L36.1695 34.1205H19.1092L16.0377 27.2971H33.098L30.0266 20.4737H12.9663L9.89483 13.6503H26.9551L23.8837 6.82324H0L21.4964 54.5943Z" fill="#9A0FF1"/>
        <path d="M82.6459 14.2607H79.0762V41.7067H84.1742V30.3357H98.0143V25.6318H84.1742V18.9683H99.5835V14.2607H84.1742H82.6459Z" fill="#070707"/>
        <path d="M121.422 22.9241C120.559 22.0874 119.559 21.4404 118.425 20.983C117.287 20.5257 116.016 20.2988 114.603 20.2988C113.323 20.2988 112.081 20.5666 110.877 21.102C109.676 21.6375 108.616 22.3849 107.701 23.3368C106.786 24.2925 106.054 25.434 105.503 26.769C104.953 28.1039 104.682 29.5801 104.682 31.2014C104.682 32.8226 104.957 34.2654 105.503 35.6115C106.054 36.9575 106.783 38.114 107.701 39.0808C108.616 40.0476 109.676 40.7987 110.877 41.3342C112.078 41.8696 113.32 42.1374 114.603 42.1374C116.016 42.1374 117.287 41.9031 118.425 41.4309C119.563 40.9586 120.563 40.3079 121.422 39.4712L122.207 41.706H126.52V20.7302H121.422V22.9241ZM121.009 33.6704C120.734 34.429 120.344 35.0872 119.834 35.6486C119.325 36.2101 118.711 36.6489 117.99 36.9613C117.272 37.2736 116.48 37.4335 115.618 37.4335C114.755 37.4335 113.926 37.2773 113.208 36.9613C112.49 36.6489 111.873 36.2101 111.364 35.6486C110.854 35.0872 110.464 34.429 110.189 33.6704C109.914 32.9119 109.776 32.0901 109.776 31.2014C109.776 30.3127 109.914 29.5281 110.189 28.7695C110.464 28.0109 110.854 27.3528 111.364 26.7913C111.873 26.2298 112.487 25.791 113.208 25.4786C113.926 25.1663 114.729 25.0064 115.618 25.0064C116.506 25.0064 117.272 25.1626 117.99 25.4786C118.708 25.791 119.325 26.2298 119.834 26.7913C120.344 27.3528 120.734 28.0146 121.009 28.7695C121.285 29.5281 121.422 30.3387 121.422 31.2014C121.422 32.064 121.285 32.9119 121.009 33.6704Z" fill="#070707"/>
        <path d="M149.689 22.846C148.878 22.0353 147.911 21.4106 146.788 20.9644C145.665 20.5219 144.423 20.2988 143.062 20.2988C141.701 20.2988 140.552 20.5331 139.456 21.0053C138.359 21.4776 137.444 22.1283 136.711 22.965L135.927 20.7302H131.613V41.706H136.711V29.7883C136.711 28.1671 137.18 26.8619 138.124 25.8691C139.065 24.8763 140.318 24.378 141.887 24.378C143.457 24.378 144.754 24.8763 145.71 25.8691C146.666 26.8619 147.142 28.1708 147.142 29.7883V41.706H152.24V29.5913C152.24 28.1783 152.016 26.9065 151.574 25.7687C151.128 24.6308 150.503 23.6566 149.692 22.846H149.689Z" fill="#070707"/>
        <path d="M174.076 22.9241C173.214 22.0874 172.214 21.4404 171.076 20.983C169.938 20.5257 168.666 20.2988 167.253 20.2988C165.97 20.2988 164.732 20.5666 163.527 21.102C162.326 21.6375 161.266 22.3849 160.352 23.3368C159.437 24.2925 158.704 25.434 158.158 26.769C157.607 28.1039 157.336 29.5801 157.336 31.2014C157.336 32.8226 157.611 34.2654 158.158 35.6115C158.708 36.9575 159.437 38.114 160.352 39.0808C161.266 40.0476 162.326 40.7987 163.527 41.3342C164.728 41.8696 165.97 42.1374 167.253 42.1374C168.666 42.1374 169.938 41.9031 171.076 41.4309C172.214 40.9586 173.214 40.3079 174.076 39.4712L174.861 41.706H179.174V20.7302H174.076V22.9241ZM173.667 33.6704C173.392 34.429 173.002 35.0872 172.492 35.6486C171.983 36.2101 171.369 36.6489 170.652 36.9613C169.934 37.2736 169.142 37.4335 168.279 37.4335C167.417 37.4335 166.587 37.2773 165.87 36.9613C165.152 36.6489 164.539 36.2101 164.029 35.6486C163.52 35.0872 163.129 34.429 162.854 33.6704C162.579 32.9119 162.441 32.0901 162.441 31.2014C162.441 30.3127 162.579 29.5281 162.854 28.7695C163.129 28.0109 163.52 27.3528 164.029 26.7913C164.539 26.2298 165.152 25.791 165.87 25.4786C166.587 25.1663 167.394 25.0064 168.279 25.0064C169.164 25.0064 169.934 25.1626 170.652 25.4786C171.369 25.791 171.983 26.2298 172.492 26.7913C173.002 27.3528 173.392 28.0146 173.667 28.7695C173.943 29.5281 174.08 30.3387 174.08 31.2014C174.08 32.064 173.943 32.9119 173.667 33.6704Z" fill="#070707"/>
        <path d="M195.523 37.6307C194.583 37.6307 193.843 37.3741 193.307 36.8647C192.772 36.3552 192.504 35.407 192.504 34.0201V24.6495H200.621V20.7303H192.504V14.8477H187.406V20.7303H184.268V24.6495H187.406V34.0201C187.406 36.7122 188.008 38.7388 189.209 40.096C190.41 41.457 192.385 42.1337 195.129 42.1337C197.115 42.1337 199.454 41.8065 202.146 41.1521V36.2511C200.811 36.5895 199.584 36.9056 198.461 37.1919C197.338 37.4819 196.356 37.6232 195.52 37.6232L195.523 37.6307Z" fill="#070707"/>
        <path d="M212.346 20.7305H207.248V41.7063H212.346V20.7305Z" fill="#070707"/>
        <path d="M209.795 12.457C208.906 12.457 208.192 12.7173 207.657 13.2416C207.121 13.7659 206.854 14.4724 206.854 15.3574C206.854 16.2424 207.121 16.9601 207.657 17.4955C208.192 18.031 208.906 18.2987 209.795 18.2987C210.684 18.2987 211.394 18.031 211.933 17.4955C212.468 16.9601 212.736 16.2461 212.736 15.3574C212.736 14.4687 212.468 13.7622 211.933 13.2416C211.397 12.721 210.684 12.457 209.795 12.457Z" fill="#070707"/>
        <path d="M236.258 23.3182C235.292 22.3514 234.135 21.6077 232.789 21.0834C231.443 20.5591 229.959 20.2988 228.338 20.2988C226.717 20.2988 225.203 20.5591 223.868 21.0834C222.537 21.6077 221.392 22.3514 220.436 23.3182C219.481 24.285 218.744 25.434 218.22 26.769C217.696 28.1039 217.436 29.5913 217.436 31.2385C217.436 32.8858 217.696 34.3769 218.22 35.7081C218.744 37.0431 219.481 38.1846 220.436 39.1403C221.392 40.0959 222.534 40.8322 223.868 41.3565C225.203 41.8808 226.691 42.1411 228.338 42.1411C229.985 42.1411 231.443 41.8808 232.789 41.3565C234.135 40.8359 235.292 40.0959 236.258 39.1403C237.225 38.1846 237.969 37.0431 238.493 35.7081C239.018 34.3769 239.278 32.8858 239.278 31.2385C239.278 29.5913 239.018 28.1039 238.493 26.769C237.969 25.4377 237.225 24.285 236.258 23.3182ZM233.771 33.7076C233.496 34.4662 233.105 35.1243 232.596 35.6895C232.086 36.251 231.473 36.6973 230.751 37.0208C230.034 37.348 229.227 37.5116 228.342 37.5116C227.457 37.5116 226.65 37.348 225.932 37.0208C225.215 36.6935 224.601 36.251 224.092 35.6895C223.582 35.1281 223.184 34.4662 222.894 33.7076C222.608 32.949 222.463 32.1273 222.463 31.2385C222.463 30.3498 222.608 29.5206 222.894 28.7509C223.181 27.9812 223.582 27.3119 224.092 26.7504C224.601 26.1889 225.215 25.7501 225.932 25.4377C226.65 25.1254 227.457 24.9655 228.342 24.9655C229.227 24.9655 230.034 25.1217 230.751 25.4377C231.469 25.7501 232.086 26.1889 232.596 26.7504C233.105 27.3119 233.496 27.9812 233.771 28.7509C234.046 29.5206 234.183 30.3536 234.183 31.2385C234.183 32.1235 234.046 32.949 233.771 33.7076Z" fill="#070707"/>
        <path d="M264.334 25.7687C263.888 24.6308 263.263 23.6566 262.452 22.846C261.642 22.0353 260.675 21.4106 259.552 20.9644C258.429 20.5219 257.187 20.2988 255.826 20.2988C254.465 20.2988 253.316 20.5331 252.219 21.0053C251.122 21.4776 250.207 22.1283 249.475 22.965L248.69 20.7302H244.377V41.706H249.475V29.7883C249.475 28.1671 249.943 26.8619 250.888 25.8691C251.829 24.8763 253.082 24.378 254.651 24.378C256.22 24.378 257.518 24.8763 258.474 25.8691C259.429 26.8619 259.905 28.1708 259.905 29.7883V41.706H265.003V29.5913C265.003 28.1783 264.78 26.9065 264.338 25.7687H264.334Z" fill="#070707"/>
        </g>
        <defs>
        <clipPath id="clip0_8801_948">
        <rect width="265" height="54.5945" fill="white"/>
        </clipPath>
        </defs>
    </svg>
)

const Login = () => {
    const userRef = useRef()
    const { register, handleSubmit, formState: { errors} } = useForm();
    const [error, setError] = useState('');
    const navigate = useNavigate();

    useRedirectIfAuth();


    useEffect(() => {
        if (userRef.current) {
            userRef.current.focus();
        }
    }, [])

    const onSubmit = async (data) => {
                                       
        setError(''); 

        try {
            const result = await loginUser(data.email, data.password);

            //console.log('Login bem-sucedido:', result); 
            navigate('/pecas');

        } catch (err) {
            setError(err.message || 'Ocorreu um erro desconhecido ao tentar fazer login.');
            console.error('Falha no login:', err);
        }
    };

  return (
    <div className="login-container">
            
            <div className="login-box">
                <span className="error-message" aria-live="assertive">{ error }</span>
                <div className="logo-container">
                    <LogoSvg />
                </div>
                <h2 className="welcome-text">Bem-vindo ao Fanation</h2>
                <p className="sub-text">Acesse a sua conta para iniciar</p>
                <form className="login-form" onSubmit={handleSubmit(onSubmit)}>
                    <label htmlFor="email-input" className="input-label">
                        Inserir e-mail
                    </label>
                    <input
                        name="email"
                        id='email-input'
                        type="text"
                        className="login-input"
                        placeholder="Digite seu e-mail"
                        //onChange={handleUserInput}
                        ref={userRef}
                        //value={user}
                        {...register("email", { 
                            required: "E-mail é obrigatório", 
                            pattern: {
                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                message: "Endereço de e-mail inválido"
                            } 
                        })}
                    />
                    {errors.email && <span className="error-message">{errors.email.message}</span>}
                    <label htmlFor="password-input" className="input-label">
                        Inserir senha
                    </label>
                    <input
                        name="password"
                        id='password-input'
                        type="password"
                        className="login-input"
                        placeholder="Digite sua senha"
                        //onChange={handlePwdInput}
                        ref={userRef}
                        //value={pwd}
                        {...register("password", { required: "Senha é obrigatória" })}
                    />
                    {errors.password && <span className="error-message">Senha é obrigatória</span>}
                    <button type="submit" className="submit-button">
                        Acessar
                    </button>
                </form>
            </div>
        </div>
  )
}

export default Login